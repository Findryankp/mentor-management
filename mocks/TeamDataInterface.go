// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	teams "immersiveApp/features/teams"

	mock "github.com/stretchr/testify/mock"
)

// TeamDataInterface is an autogenerated mock type for the TeamDataInterface type
type TeamDataInterface struct {
	mock.Mock
}

// Destroy provides a mock function with given fields: id
func (_m *TeamDataInterface) Destroy(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Edit provides a mock function with given fields: teamEntity, id
func (_m *TeamDataInterface) Edit(teamEntity teams.TeamEntity, id uint) error {
	ret := _m.Called(teamEntity, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(teams.TeamEntity, uint) error); ok {
		r0 = rf(teamEntity, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectAll provides a mock function with given fields:
func (_m *TeamDataInterface) SelectAll() ([]teams.TeamEntity, error) {
	ret := _m.Called()

	var r0 []teams.TeamEntity
	if rf, ok := ret.Get(0).(func() []teams.TeamEntity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]teams.TeamEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectById provides a mock function with given fields: id
func (_m *TeamDataInterface) SelectById(id uint) (teams.TeamEntity, error) {
	ret := _m.Called(id)

	var r0 teams.TeamEntity
	if rf, ok := ret.Get(0).(func(uint) teams.TeamEntity); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(teams.TeamEntity)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: teamEntity
func (_m *TeamDataInterface) Store(teamEntity teams.TeamEntity) (uint, error) {
	ret := _m.Called(teamEntity)

	var r0 uint
	if rf, ok := ret.Get(0).(func(teams.TeamEntity) uint); ok {
		r0 = rf(teamEntity)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(teams.TeamEntity) error); ok {
		r1 = rf(teamEntity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTeamDataInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewTeamDataInterface creates a new instance of TeamDataInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTeamDataInterface(t mockConstructorTestingTNewTeamDataInterface) *TeamDataInterface {
	mock := &TeamDataInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
