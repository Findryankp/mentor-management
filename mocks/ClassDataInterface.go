// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	classes "immersiveApp/features/classes"

	mock "github.com/stretchr/testify/mock"
)

// ClassDataInterface is an autogenerated mock type for the ClassDataInterface type
type ClassDataInterface struct {
	mock.Mock
}

// Destroy provides a mock function with given fields: id
func (_m *ClassDataInterface) Destroy(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Edit provides a mock function with given fields: classEntity, id
func (_m *ClassDataInterface) Edit(classEntity classes.ClassEntity, id uint) error {
	ret := _m.Called(classEntity, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(classes.ClassEntity, uint) error); ok {
		r0 = rf(classEntity, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectAll provides a mock function with given fields:
func (_m *ClassDataInterface) SelectAll() ([]classes.ClassEntity, error) {
	ret := _m.Called()

	var r0 []classes.ClassEntity
	if rf, ok := ret.Get(0).(func() []classes.ClassEntity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]classes.ClassEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectById provides a mock function with given fields: id
func (_m *ClassDataInterface) SelectById(id uint) (classes.ClassEntity, error) {
	ret := _m.Called(id)

	var r0 classes.ClassEntity
	if rf, ok := ret.Get(0).(func(uint) classes.ClassEntity); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(classes.ClassEntity)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: classEntity
func (_m *ClassDataInterface) Store(classEntity classes.ClassEntity) (uint, error) {
	ret := _m.Called(classEntity)

	var r0 uint
	if rf, ok := ret.Get(0).(func(classes.ClassEntity) uint); ok {
		r0 = rf(classEntity)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(classes.ClassEntity) error); ok {
		r1 = rf(classEntity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewClassDataInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewClassDataInterface creates a new instance of ClassDataInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClassDataInterface(t mockConstructorTestingTNewClassDataInterface) *ClassDataInterface {
	mock := &ClassDataInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
