// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	feedbacks "immersiveApp/features/feedbacks"

	mock "github.com/stretchr/testify/mock"
)

// FeedbackServiceInterface is an autogenerated mock type for the FeedbackServiceInterface type
type FeedbackServiceInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: feedbackEntity
func (_m *FeedbackServiceInterface) Create(feedbackEntity feedbacks.FeedbackEntity) (feedbacks.FeedbackEntity, error) {
	ret := _m.Called(feedbackEntity)

	var r0 feedbacks.FeedbackEntity
	if rf, ok := ret.Get(0).(func(feedbacks.FeedbackEntity) feedbacks.FeedbackEntity); ok {
		r0 = rf(feedbackEntity)
	} else {
		r0 = ret.Get(0).(feedbacks.FeedbackEntity)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(feedbacks.FeedbackEntity) error); ok {
		r1 = rf(feedbackEntity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *FeedbackServiceInterface) Delete(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *FeedbackServiceInterface) GetAll() ([]feedbacks.FeedbackEntity, error) {
	ret := _m.Called()

	var r0 []feedbacks.FeedbackEntity
	if rf, ok := ret.Get(0).(func() []feedbacks.FeedbackEntity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]feedbacks.FeedbackEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *FeedbackServiceInterface) GetById(id uint) (feedbacks.FeedbackEntity, error) {
	ret := _m.Called(id)

	var r0 feedbacks.FeedbackEntity
	if rf, ok := ret.Get(0).(func(uint) feedbacks.FeedbackEntity); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(feedbacks.FeedbackEntity)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: feedbackEntity, id
func (_m *FeedbackServiceInterface) Update(feedbackEntity feedbacks.FeedbackEntity, id uint) (feedbacks.FeedbackEntity, error) {
	ret := _m.Called(feedbackEntity, id)

	var r0 feedbacks.FeedbackEntity
	if rf, ok := ret.Get(0).(func(feedbacks.FeedbackEntity, uint) feedbacks.FeedbackEntity); ok {
		r0 = rf(feedbackEntity, id)
	} else {
		r0 = ret.Get(0).(feedbacks.FeedbackEntity)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(feedbacks.FeedbackEntity, uint) error); ok {
		r1 = rf(feedbackEntity, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewFeedbackServiceInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewFeedbackServiceInterface creates a new instance of FeedbackServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFeedbackServiceInterface(t mockConstructorTestingTNewFeedbackServiceInterface) *FeedbackServiceInterface {
	mock := &FeedbackServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
