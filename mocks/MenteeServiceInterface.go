// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	mentees "immersiveApp/features/mentees"

	mock "github.com/stretchr/testify/mock"
)

// MenteeServiceInterface is an autogenerated mock type for the MenteeServiceInterface type
type MenteeServiceInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: menteeEntity
func (_m *MenteeServiceInterface) Create(menteeEntity mentees.MenteeEntity) (mentees.MenteeEntity, error) {
	ret := _m.Called(menteeEntity)

	var r0 mentees.MenteeEntity
	if rf, ok := ret.Get(0).(func(mentees.MenteeEntity) mentees.MenteeEntity); ok {
		r0 = rf(menteeEntity)
	} else {
		r0 = ret.Get(0).(mentees.MenteeEntity)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(mentees.MenteeEntity) error); ok {
		r1 = rf(menteeEntity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *MenteeServiceInterface) Delete(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *MenteeServiceInterface) GetAll() ([]mentees.MenteeEntity, error) {
	ret := _m.Called()

	var r0 []mentees.MenteeEntity
	if rf, ok := ret.Get(0).(func() []mentees.MenteeEntity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]mentees.MenteeEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *MenteeServiceInterface) GetById(id uint) (mentees.MenteeEntity, error) {
	ret := _m.Called(id)

	var r0 mentees.MenteeEntity
	if rf, ok := ret.Get(0).(func(uint) mentees.MenteeEntity); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(mentees.MenteeEntity)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: menteeEntity, id
func (_m *MenteeServiceInterface) Update(menteeEntity mentees.MenteeEntity, id uint) (mentees.MenteeEntity, error) {
	ret := _m.Called(menteeEntity, id)

	var r0 mentees.MenteeEntity
	if rf, ok := ret.Get(0).(func(mentees.MenteeEntity, uint) mentees.MenteeEntity); ok {
		r0 = rf(menteeEntity, id)
	} else {
		r0 = ret.Get(0).(mentees.MenteeEntity)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(mentees.MenteeEntity, uint) error); ok {
		r1 = rf(menteeEntity, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMenteeServiceInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewMenteeServiceInterface creates a new instance of MenteeServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMenteeServiceInterface(t mockConstructorTestingTNewMenteeServiceInterface) *MenteeServiceInterface {
	mock := &MenteeServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}